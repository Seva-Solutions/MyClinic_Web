{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/nandupokhrel/Desktop/OurClinic_Web/src/components/googleCalendar/GoogleCalendar.js\";\nimport React, { Component } from 'react';\nimport WeekView from './weekView';\nimport CalendarEventHandler from './calendarEventHandler';\nimport Navbar from '../Navbar/index';\n\nclass GoogleCalendar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addNewEvent = event => {\n      event = { ...event,\n        id: CalendarEventHandler.generateId(event)\n      };\n      this.setState(previousSate => ({\n        events: CalendarEventHandler.add(previousSate.events, event)\n      }));\n    };\n\n    this.updateEvent = (eventId, updatedEvent) => {\n      this.setState(previousState => {\n        return {\n          events: CalendarEventHandler.update(eventId, updatedEvent, previousState.events)\n        };\n      });\n    };\n\n    this.deleteEvent = eventId => {\n      this.setState(previousState => {\n        return {\n          events: CalendarEventHandler.delete(eventId, previousState.events)\n        };\n      });\n    };\n\n    this.state = {\n      events: JSON.parse(localStorage.getItem('events')) || {}\n    }; // saving data to the local storage\n\n    window.addEventListener('beforeunload', () => {\n      localStorage.setItem('events', JSON.stringify(this.state.events));\n    });\n  }\n  /**\n   * Add new event in the event list in the state\n   * @param {Object} event - Event object\n   * {\n   *  start: {timeStamp} - Time stamp for the start of the event,\n   *  title: {string} - Title fo the new event,\n   *  end: {timeStamp} - Time stamp for the end of the event,\n   * }\n  */\n\n\n  render() {\n    const {\n      events\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(WeekView, {\n      events: events,\n      onNewEvent: this.addNewEvent,\n      onEventUpdate: this.updateEvent,\n      onEventDelete: this.deleteEvent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GoogleCalendar;","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/OurClinic_Web/src/components/googleCalendar/GoogleCalendar.js"],"names":["React","Component","WeekView","CalendarEventHandler","Navbar","GoogleCalendar","constructor","props","addNewEvent","event","id","generateId","setState","previousSate","events","add","updateEvent","eventId","updatedEvent","previousState","update","deleteEvent","delete","state","JSON","parse","localStorage","getItem","window","addEventListener","setItem","stringify","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;;AACA,MAAMC,cAAN,SAA6BJ,SAA7B,CAAuC;AACrCK,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAOA,KAAP;;AADkB,SAsBpBC,WAtBoB,GAsBNC,KAAK,IAAI;AACrBA,MAAAA,KAAK,GAAG,EACN,GAAGA,KADG;AAENC,QAAAA,EAAE,EAAEP,oBAAoB,CAACQ,UAArB,CAAiCF,KAAjC;AAFE,OAAR;AAIA,WAAKG,QAAL,CAAeC,YAAY,KAAK;AAC9BC,QAAAA,MAAM,EAAEX,oBAAoB,CAACY,GAArB,CAA0BF,YAAY,CAACC,MAAvC,EAA+CL,KAA/C;AADsB,OAAL,CAA3B;AAGD,KA9BmB;;AAAA,SA0CpBO,WA1CoB,GA0CN,CAACC,OAAD,EAAUC,YAAV,KAA2B;AACvC,WAAKN,QAAL,CAAeO,aAAa,IAAI;AAC9B,eAAO;AACLL,UAAAA,MAAM,EAAEX,oBAAoB,CAACiB,MAArB,CACNH,OADM,EAENC,YAFM,EAGNC,aAAa,CAACL,MAHR;AADH,SAAP;AAOD,OARD;AASD,KApDmB;;AAAA,SA0DpBO,WA1DoB,GA0DNJ,OAAO,IAAI;AACvB,WAAKL,QAAL,CAAeO,aAAa,IAAI;AAC9B,eAAO;AACLL,UAAAA,MAAM,EAAEX,oBAAoB,CAACmB,MAArB,CAA6BL,OAA7B,EAAsCE,aAAa,CAACL,MAApD;AADH,SAAP;AAGD,OAJD;AAKD,KAhEmB;;AAGlB,SAAKS,KAAL,GAAa;AACXT,MAAAA,MAAM,EAAEU,IAAI,CAACC,KAAL,CAAYC,YAAY,CAACC,OAAb,CAAsB,QAAtB,CAAZ,KAAgD;AAD7C,KAAb,CAHkB,CAOlB;;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAyB,cAAzB,EAAyC,MAAM;AAC7CH,MAAAA,YAAY,CAACI,OAAb,CAAsB,QAAtB,EAAgCN,IAAI,CAACO,SAAL,CAAgB,KAAKR,KAAL,CAAWT,MAA3B,CAAhC;AACD,KAFD;AAGD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA6CEkB,EAAAA,MAAM,GAAI;AAER,UAAM;AAAClB,MAAAA;AAAD,QAAW,KAAKS,KAAtB;AACA,wBAEE,QAAC,QAAD;AACE,MAAA,MAAM,EAAET,MADV;AAEE,MAAA,UAAU,EAAE,KAAKN,WAFnB;AAGE,MAAA,aAAa,EAAE,KAAKQ,WAHtB;AAIE,MAAA,aAAa,EAAE,KAAKK;AAJtB;AAAA;AAAA;AAAA;AAAA,YAFF;AAUD;;AAhFoC;;AAmFvC,eAAehB,cAAf","sourcesContent":["import React, {Component} from 'react';\nimport WeekView from './weekView';\nimport CalendarEventHandler from './calendarEventHandler';\nimport Navbar from '../Navbar/index'\nclass GoogleCalendar extends Component {\n  constructor (props) {\n    super (props);\n\n    this.state = {\n      events: JSON.parse (localStorage.getItem ('events')) || {},\n    };\n\n    // saving data to the local storage\n    window.addEventListener ('beforeunload', () => {\n      localStorage.setItem ('events', JSON.stringify (this.state.events));\n    });\n  }\n\n  /**\n   * Add new event in the event list in the state\n   * @param {Object} event - Event object\n   * {\n   *  start: {timeStamp} - Time stamp for the start of the event,\n   *  title: {string} - Title fo the new event,\n   *  end: {timeStamp} - Time stamp for the end of the event,\n   * }\n  */\n  addNewEvent = event => {\n    event = {\n      ...event,\n      id: CalendarEventHandler.generateId (event),\n    };\n    this.setState (previousSate => ({\n      events: CalendarEventHandler.add (previousSate.events, event),\n    }));\n  };\n\n  /**\n   * Updates an already existing event in the state event list\n   * @param {string} event eventID id of the event\n   * @param {Object} updatedEvent updated details of the event\n   * {\n   *  start: {timeStamp} - Time stamp for the start of the event,\n   *  title: {string} - Title fo the new event,\n   *  end: {timeStamp} - Time stamp for the end of the event,\n   * }\n  */\n  updateEvent = (eventId, updatedEvent) => {\n    this.setState (previousState => {\n      return {\n        events: CalendarEventHandler.update (\n          eventId,\n          updatedEvent,\n          previousState.events\n        ),\n      };\n    });\n  };\n\n  /**\n   * Deletes an event from the event list in the state\n   * @param {String} eventId - Id of the event\n  */\n  deleteEvent = eventId => {\n    this.setState (previousState => {\n      return {\n        events: CalendarEventHandler.delete (eventId, previousState.events),\n      };\n    });\n  };\n\n  render () {\n   \n    const {events} = this.state;\n    return (\n     \n      <WeekView\n        events={events}\n        onNewEvent={this.addNewEvent}\n        onEventUpdate={this.updateEvent}\n        onEventDelete={this.deleteEvent}\n      />\n     \n    );\n  }\n}\n\nexport default GoogleCalendar;\n"]},"metadata":{},"sourceType":"module"}