{"ast":null,"code":"import moment from 'moment';\n\nconst CalendarEventHandler = function () {\n  /**\n   * Add event after adding meta data in the event\n   * @param {arr} allEvent - Array of all the events\n   * @param {Object} newEvent - Event object of the new event\n   * @returns {Object} allEvents - A new object reference for all events\n  */\n  function addEvent(allEvents, newEvent) {\n    const time = moment(newEvent.start).hours();\n    const eventWithMeatInfo = { ...newEvent,\n      startWeek: moment(newEvent.start).week(),\n      endWeek: moment(newEvent.end).week()\n    };\n\n    if (allEvents[time]) {\n      allEvents[time].push(eventWithMeatInfo);\n    } else {\n      allEvents[time] = [eventWithMeatInfo];\n    }\n\n    return { ...allEvents\n    };\n  }\n  /**\n   * Generate unique id for an event\n   * @param {timeStamp} start - Start timestamp of the event\n   * @param {timeStamp} end - End timeStamp of the event\n   * @params {string} title - Title of the event\n   * @returns {string} id - Unique id\n  */\n\n\n  function generateUniqueId({\n    start,\n    title,\n    end\n  }) {\n    return start + title + end;\n  }\n  /**\n   * Deletes event from the list\n   * @param {string} eventId - Id of the event to be deleted\n   * @param {arr} allEvents - Array of all the events\n   * @returns {Object} allEvents - A new object reference for all events\n  */\n\n\n  function deleteEvent(eventId, allEvents) {\n    Object.keys(allEvents).forEach(time => {\n      allEvents[time] = allEvents[time].filter(event => event.id !== eventId);\n    });\n    return { ...allEvents\n    };\n  }\n  /**\n   * Updates an event from the list\n   * @param {string} eventId - Id of the event to be deleted\n   * @param {Object} updatedEvent - Event objects with the updated data\n   * @param {arr} allEvents - Array of all the events\n   * @returns {Object} allEvents - A new object reference for all events\n  */\n\n\n  function updateEvent(eventId, updatedEvent, allEvents) {\n    Object.keys(allEvents).forEach(time => {\n      allEvents[time] = allEvents[time].map(event => event.id === eventId ? { ...event,\n        ...updatedEvent\n      } : event);\n    });\n    return { ...allEvents\n    };\n  }\n\n  return {\n    add: addEvent,\n    delete: deleteEvent,\n    update: updateEvent,\n    generateId: generateUniqueId\n  };\n}();\n\nexport default CalendarEventHandler;","map":{"version":3,"sources":["/Users/nandupokhrel/Desktop/OurClinic_Web/src/components/googleCalendar/calendarEventHandler.js"],"names":["moment","CalendarEventHandler","addEvent","allEvents","newEvent","time","start","hours","eventWithMeatInfo","startWeek","week","endWeek","end","push","generateUniqueId","title","deleteEvent","eventId","Object","keys","forEach","filter","event","id","updateEvent","updatedEvent","map","add","delete","update","generateId"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,oBAAoB,GAAI,YAAY;AACxC;AACF;AACA;AACA;AACA;AACA;AACE,WAASC,QAAT,CAAmBC,SAAnB,EAA8BC,QAA9B,EAAwC;AACtC,UAAMC,IAAI,GAAGL,MAAM,CAAEI,QAAQ,CAACE,KAAX,CAAN,CAAwBC,KAAxB,EAAb;AACA,UAAMC,iBAAiB,GAAG,EACxB,GAAGJ,QADqB;AAExBK,MAAAA,SAAS,EAAET,MAAM,CAAEI,QAAQ,CAACE,KAAX,CAAN,CAAwBI,IAAxB,EAFa;AAGxBC,MAAAA,OAAO,EAAEX,MAAM,CAAEI,QAAQ,CAACQ,GAAX,CAAN,CAAsBF,IAAtB;AAHe,KAA1B;;AAKA,QAAIP,SAAS,CAACE,IAAD,CAAb,EAAqB;AACnBF,MAAAA,SAAS,CAACE,IAAD,CAAT,CAAgBQ,IAAhB,CAAsBL,iBAAtB;AACD,KAFD,MAEO;AACLL,MAAAA,SAAS,CAACE,IAAD,CAAT,GAAkB,CAACG,iBAAD,CAAlB;AACD;;AACD,WAAO,EAAC,GAAGL;AAAJ,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASW,gBAAT,CAA0B;AAACR,IAAAA,KAAD;AAAQS,IAAAA,KAAR;AAAeH,IAAAA;AAAf,GAA1B,EAA+C;AAC7C,WAAON,KAAK,GAAGS,KAAR,GAAgBH,GAAvB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASI,WAAT,CAAsBC,OAAtB,EAA+Bd,SAA/B,EAA0C;AACxCe,IAAAA,MAAM,CAACC,IAAP,CAAahB,SAAb,EAAwBiB,OAAxB,CAAiCf,IAAI,IAAI;AACvCF,MAAAA,SAAS,CAACE,IAAD,CAAT,GAAkBF,SAAS,CAACE,IAAD,CAAT,CAAgBgB,MAAhB,CAAwBC,KAAK,IAAIA,KAAK,CAACC,EAAN,KAAaN,OAA9C,CAAlB;AACD,KAFD;AAGA,WAAO,EAAC,GAAGd;AAAJ,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASqB,WAAT,CAAsBP,OAAtB,EAA+BQ,YAA/B,EAA6CtB,SAA7C,EAAwD;AACtDe,IAAAA,MAAM,CAACC,IAAP,CAAahB,SAAb,EAAwBiB,OAAxB,CAAiCf,IAAI,IAAI;AACvCF,MAAAA,SAAS,CAACE,IAAD,CAAT,GAAkBF,SAAS,CAACE,IAAD,CAAT,CAAgBqB,GAAhB,CAChBJ,KAAK,IAAKA,KAAK,CAACC,EAAN,KAAaN,OAAb,GAAuB,EAAC,GAAGK,KAAJ;AAAW,WAAGG;AAAd,OAAvB,GAAqDH,KAD/C,CAAlB;AAGD,KAJD;AAKA,WAAO,EAAC,GAAGnB;AAAJ,KAAP;AACD;;AAED,SAAO;AACLwB,IAAAA,GAAG,EAAEzB,QADA;AAEL0B,IAAAA,MAAM,EAAEZ,WAFH;AAGLa,IAAAA,MAAM,EAAEL,WAHH;AAILM,IAAAA,UAAU,EAAEhB;AAJP,GAAP;AAMD,CApE4B,EAA7B;;AAsEA,eAAeb,oBAAf","sourcesContent":["import moment from 'moment';\n\nconst CalendarEventHandler = (function () {\n  /**\n   * Add event after adding meta data in the event\n   * @param {arr} allEvent - Array of all the events\n   * @param {Object} newEvent - Event object of the new event\n   * @returns {Object} allEvents - A new object reference for all events\n  */\n  function addEvent (allEvents, newEvent) {\n    const time = moment (newEvent.start).hours ();\n    const eventWithMeatInfo = {\n      ...newEvent,\n      startWeek: moment (newEvent.start).week (),\n      endWeek: moment (newEvent.end).week (),\n    };\n    if (allEvents[time]) {\n      allEvents[time].push (eventWithMeatInfo);\n    } else {\n      allEvents[time] = [eventWithMeatInfo];\n    }\n    return {...allEvents};\n  }\n\n  /**\n   * Generate unique id for an event\n   * @param {timeStamp} start - Start timestamp of the event\n   * @param {timeStamp} end - End timeStamp of the event\n   * @params {string} title - Title of the event\n   * @returns {string} id - Unique id\n  */\n  function generateUniqueId({start, title, end}) {\n    return start + title + end;\n  }\n\n  /**\n   * Deletes event from the list\n   * @param {string} eventId - Id of the event to be deleted\n   * @param {arr} allEvents - Array of all the events\n   * @returns {Object} allEvents - A new object reference for all events\n  */\n  function deleteEvent (eventId, allEvents) {\n    Object.keys (allEvents).forEach (time => {\n      allEvents[time] = allEvents[time].filter (event => event.id !== eventId);\n    });\n    return {...allEvents};\n  }\n\n  /**\n   * Updates an event from the list\n   * @param {string} eventId - Id of the event to be deleted\n   * @param {Object} updatedEvent - Event objects with the updated data\n   * @param {arr} allEvents - Array of all the events\n   * @returns {Object} allEvents - A new object reference for all events\n  */\n  function updateEvent (eventId, updatedEvent, allEvents) {\n    Object.keys (allEvents).forEach (time => {\n      allEvents[time] = allEvents[time].map (\n        event => (event.id === eventId ? {...event, ...updatedEvent} : event)\n      );\n    });\n    return {...allEvents};\n  }\n\n  return {\n    add: addEvent,\n    delete: deleteEvent,\n    update: updateEvent,\n    generateId: generateUniqueId,\n  };\n}) ();\n\nexport default CalendarEventHandler;\n"]},"metadata":{},"sourceType":"module"}